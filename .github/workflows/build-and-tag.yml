name: Build docker image and push a new tag

on:
  pull_request:
    types:
      - closed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  security-events: write
  pull-requests: read
  pages: write
  id-token: write

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    outputs:
      version: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        uses: ./.github/actions/generate-version
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: prepare-build
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ needs.prepare-build.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        id: build-env
        uses: ./.github/actions/setup-build-env
        with:
          registry: ${{ env.REGISTRY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.prepare-build.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            VERSION=${{ needs.prepare-build.outputs.version }}
            VCS_REF=${{ steps.build-env.outputs.vcs-ref }}
            BUILD_DATE=${{ steps.build-env.outputs.build-date }}
            PROJECT_URL=${{ steps.build-env.outputs.project-url }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  update-chart:
    runs-on: ubuntu-latest
    needs: [ prepare-build, build ]
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Helm Chart
        uses: ./.github/actions/update-helm-chart
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ needs.prepare-build.outputs.version }}
          helm-repo: w6d-io/charts
          path-to-chart: charts/chopper

  release-drafter:
    runs-on: ubuntu-latest
    needs: [ prepare-build, build ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-autolabeler: false
          version: ${{ needs.prepare-build.outputs.version }}
          tag: ${{ needs.prepare-build.outputs.version }}
          name: ${{ needs.prepare-build.outputs.version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
